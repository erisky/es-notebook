# list arguments
for arg in $@ 
do
    echo $arg
done


[ string1 = string2 ]        string1 and string2 are equal
[ string1 != string2 ]       string1 and string2 are not equal
[ string1 \< string2 ]       string1 is lexically less than string2(e.g. 'a' is less than 'b')
[ string1 \> string2 ]       string1 is lexically greater than string2(e.g. 'b' is greater than 'a')
[ -z string ]                string is zero (e.g. a empty string)
[ -n string ]                string is nonzero (e.g. a VAR string)
[ -e file ]                  file exists
[ -f file ]                  file is a file
[ -d file ]                  file is a directory
[ -c file ]                  file is a character device
[ -b file ]                  file is a block device
[ -p file ]                  file is a named pipe
[ -s file ]                  file is not empty
[ -k file ]                  file's sticky bit is set
[ -S file ]                  file is a socket
[ -L file ]                  file is a symbolic link
[ -r file ]                  file is readable by user
[ -w file ]                  file is writeable by user
[ -x file ]                  file is executeable by user
[ -O file ]                  file is owner by user
[ -G file ]                  file is group owned by a greoup 
[ -u file ]                  file has its set user ID bit set
[ -g file ]                  file has its group user ID bit set
[ file1 -nt file2 ]          file1 is newer than file2
[ file1 -ot file2 ]          file1 is older than file2
[ file -ef file2 ]           file1 is another name for file2
[ n1 -eq n2 ]                true if integer n1 = integer n2
[ n1 -ne n2 ]                true if integer n1 <> n2 
[ n1 -gt n2 ]                true if n1 > n2 
[ n1 -ge n2 ]                true if n1 >= n2
[ n1 -lt n2 ]                true if n1 < n2
[ n1 -le n2 ]                true if n1 <= n2

-a   --> AND
-o   --> OR 

==[if]==
    #!/bin/bash
    if [ "foo" = "foo" ]; then
       echo expression evaluated as true
    else
       echo expression evaluated as false
    fi

== [loop] ==
for VARIABLE in 1 2 3 4 5 .. N
do
	command1
	command2
	commandN
done

== [while]==
 COUNTER=0
 while [  $COUNTER -lt 10 ]; do
     echo The counter is $COUNTER
     let COUNTER=COUNTER+1 
 done



=== string stuff ===
# 1. string length
test="TEST Length"
echo ${#test}

# 2. extract a string from positon
$ test="ABCD-1234"
$ echo ${test:5}
1234
# with length
$ echo ${test:5:2}
12

# 3. matching the string
# 3.1 delete the match from start
$ test="Jordan-NBA-Kobe-James"
$ echo ${test#"Jordan-"}
NBA-Kobe-James

# 3.2 delte the match from back
$ echo ${test%"James"}
Jordan-NBA-Kobe-

# 3.3 Delete the shortest match
$ test="Jordan-NBA-Kobe-James"
# delete the short match
$ echo ${test#*-}
NBA-Kobe-James
# delete the longest match from start 
$ echo ${test##*-}
James

$ echo ${test%%-*}
Jordan 

# 4. match and replacement
${string/pattern/replacement}  --> single match
${string//pattern/replacement} --> all match and replacement

ex. 
$ test="Lebron James is James, James Hardem is Harden"
$ echo ${test/James/Jordan}
Lebron Jordan is James, James Hardem is Harden
$ echo ${test//James/Jordan}
Lebron Jordan is Jordan, Jordan Hardem is Harden

# 4.1 match and replace from start/end
ex:
$ test="Jordan-NBA-Kobe-James"
$ echo ${test/%-*/Curry}
JordanCurry
$ echo ${test/#*-/Curry}
CurryJames


# int it hex

printf "%x%x" 123 23 


